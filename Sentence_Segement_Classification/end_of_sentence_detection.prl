#!/usr/local/bin/perl -w

use FileHandle;
use strict;

############################################################
##  EXAMPLE SHELL FOR END-OF-SENTENCE CLASSIFIER
##
##    examp1.prl < sent.data.train | more
##
##  Suggestion: run in a wide window
############################################################


my $CS466  = "/home/1/yarowsky/cs466/hw1";  # directory path on condor

my $abbrvs = { };   # hash of common abbreviations
my $titles = { };   # hash of common titles
my $internal = { }; # hash of sentence internal
my $unlikely_nouns = { }; # hash of sentence internal
my $timeterms = { }; # hash of sentence internal

my $line      = undef;   # used to store a line of input
my $correct   = 0;       # the number of correct classifications made
my $incorrect = 0;       # the number of incorrect classifications made


&initialize_set( $abbrvs, "$CS466/classes/abbrevs" );
&initialize_set( $titles, "$CS466/classes/titles"  );
&initialize_set( $internal, "$CS466/classes/sentence_internal"  );
&initialize_set( $unlikely_nouns, "$CS466/classes/unlikely_proper_nouns"  );
&initialize_set( $timeterms, "$CS466/classes/timeterms"  );


while (defined ($line = <STDIN>)) {

    my @words = split ' ', $line;

    my $class   = shift @words;    # 'EOS' or 'NEOS'
    my $id      = shift @words;    # sentence identifier
    my $L3      = shift @words;    # 3rd word to the left of period
    my $L2      = shift @words;    # 2nd word to the left of period
    my $L1      = shift @words;    # 1st word to the left of period
    my $C       = shift @words;    # the period
    my $R1      = shift @words;    # 1st word to the right of period
    my $R2      = shift @words;    # 2nd word to the right of period
    my $R3      = shift @words;    # 3rd word to the right of period
    my $Llength = shift @words;    # words to the left before a !,?, or <P>
    my $Rlength = shift @words;    # words to the right before a !,?, or <P>
    my $Nspaces = shift @words;    # number of spaces after the period

    # Rule definitions
    #
    #    1) If the word immediately to the right begins with a lower case 
    #       letter than not an end of sentence
    #
    #    2) If the token immediately to the right is a paragraph indicator than
    #       is an end of sentence
    #
    #    3) If the token immediately to the right is a comma or period than not
    #       an end of sentence
    #
    #    4) If the token immediately to the left is a singular capital letter
    #       than not an end of sentence
    #
    #    5) If the token immediately to the left is a common title than not an
    #       end of sentence
    #
    #    6) If the token immediately to the left is a common abbreviation than
    #       not an end of sentence
    #
    #    7) If the word to the right is capitalized then is an end of sentence.
    #       This is the default state.

    if    ( $R1 =~ /^[a-z]/ ) { &ret( 1, $class, $id, 'NEOS', $line); }
    elsif ( $R1 =~ /^<P>$/  ) { &ret( 2, $class, $id, 'EOS' , $line); }
    elsif ( $R1 =~ /^[,.]/  ) { &ret( 3, $class, $id, 'NEOS', $line); }
    elsif ( $L1 =~ /^[A-Z]$/) { 
         if (not ($R1 =~ /^[A-Z]$/) && $R1 =~ /^[A-Z]/ && exists $$unlikely_nouns{ "\L$R1" }) { 
		 &ret( 12, $class, $id, 'EOS' , $line); 
	 }	    
	 else {
	    &ret( 4, $class, $id, 'NEOS', $line); 
         }
    }
    elsif ( $L1 =~ /[ap]\.[m]/ && exists $$timeterms{ "\L$R1" }) {&ret( 13, $class, $id, 'NEOS', $line);}
    elsif ( $L1 =~ /^[A-Z]/ ) {
       if ( $R1 =~ /^[;]/) { &ret( 9, $class, $id, 'NEOS', $line); }
    }
    elsif ( $L1 =~ /^[a-z]/ && exists $$internal{ "\L$L1" }) {
          &ret( 10, $class, $id, 'NEOS', $line);
    }   
    elsif ($R1 =~ /^[)]/ && $R2 =~ /^[,.-]/ ) {
            &ret( 11, $class, $id, 'NEOS', $line);
    }
    elsif ( $R1 =~ /\d+/ && exists $$abbrvs{ "\L$L1" }) {
          &ret( 8, $class, $id, 'NEOS', $line);
    }
    elsif ( $R1 =~ /^[A-Z]/ ) { 
	if    (exists $$titles{ "\L$L1" }) {
                ret( 5, $class, $id, 'NEOS', $line);
	}
	elsif (exists $$abbrvs{ "\L$L1" } && $L1 =~ /^[A-Z]/ ) {
	      &ret( 6, $class, $id, 'NEOS', $line); 
	}
	else                               { 
	    &ret( 7, $class, $id, 'EOS' , $line); 
	}
    }
    else                     { &ret( 7, $class, $id, 'EOS' , $line); }
}

print "Your score is: ", $correct / ($correct + $incorrect), "\n";


############################################################ 
## RET - prints full line for errors and keeps score. $rule
##     - indicates the rule number responsible for the 
##     - classification
##
##  This is a useful debugging tool, as after each change in
##  the program one can identify the remaining misclassified
##  training examples and the patterns responsible for them. 
############################################################
 

sub ret {

    my $rule       = shift;   # which rule did I use here
    my $trueclass  = shift;   # what is the true sentence class ('NEOS','EOS')
    my $id         = shift;   # sentence identifier
    my $givenclass = shift;   # what is the sentence class my rule gives
    my $line       = shift;   # the actual line tested

    if ($trueclass eq $givenclass) {

	print ".. (at rule ", $rule, ") - ", $line;
	$correct++;
    }
    else {
	
	print "XX (at rule ", $rule, ") - ", $line;
	$incorrect++;
    }
}


############################################################
## INITIALIZE_SET - loads named associative array with set 
##                - members   
############################################################
    
sub initialize_set {

    my $hash   = shift;  # hash to initialize (hash reference)
    my $file   = shift;  # file to retrieve words from

    my $word   = undef;
    my $handle = new FileHandle $file, "r";  # open file for reading only

    if (defined $handle) {
	while (defined ($word = <$handle>)) {
	    
	    chomp   $word;
	    $$hash{ $word } = 1;
	}
    }
    undef $handle;                           # close the file
}





